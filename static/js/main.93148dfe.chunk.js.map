{"version":3,"sources":["service.js","Home.js","India.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","default","Service","method","url","responseType","headers","Home","state","countryCases","globalCases","getSummary","then","res","console","log","setState","summary","data","getDailyReport","dailyReport","Container","style","marginTop","Row","textAlign","Col","xs","lg","className","md","this","sm","Card","bg","text","Header","Body","Title","value","confirmed","displayType","thousandSeparator","Text","recovered","deaths","labels","map","item","reportDate","datasets","totalConfirmed","label","borderColor","backgroundColor","fill","totalRecovered","total","React","Component","India","getSummaryOfIndia","getStateWiseSummary","stateWiseSummary","Table","bordered","striped","hover","responsive","index","name","cases","App","class","href","Nav","activeKey","Item","Link","exact","path","render","to","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.93148dfe.chunk.js","sourcesContent":["const axios = require('axios').default;\n\nexport default class Service {\n    static getSummary() {\n        return axios({\n            method: 'get',\n            url: 'https://covid19.mathdro.id/api/',\n            responseType: 'stream'\n        });\n    }\n\n    static getDailyReport() {\n        return axios({\n            method: 'get',\n            url: 'https://covid19.mathdro.id/api/daily',\n            responseType: 'stream'\n        });\n    }\n\n    static getSummaryOfIndia(){\n        return axios({\n            method: 'get',\n            url: 'https://covid19.mathdro.id/api/countries/in',\n            responseType: 'stream'\n        });\n    }\n\n    static getStateWiseSummary(){\n        return axios({\n            method: 'get',\n            url: 'https://coronavirus-tracker-india-covid-19.p.rapidapi.com/api/getStatewise',\n            headers:{\n                \"x-rapidapi-host\": \"coronavirus-tracker-india-covid-19.p.rapidapi.com\",\n                \"x-rapidapi-key\": \"4a2e3811aamsh7f7033a3e894965p1627e0jsn07536ca30718\",\n                \"useQueryString\": true\n            }\n        });\n    }\n}","import React from 'react';\nimport Service from './service';\nimport Table from 'react-bootstrap/Table';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport NumberFormat from 'react-number-format';\nimport { Line } from 'react-chartjs-2';\n\n\nexport class Home extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            countryCases: [],\n            globalCases: {}\n        };\n    }\n\n\n    componentDidMount() {\n        Service.getSummary()\n            .then(res => {\n                console.log(res);\n                this.setState({\n                    summary: res.data\n                });\n            });\n\n\n        Service.getDailyReport()\n            .then(res => {\n                this.setState({\n                    dailyReport: res.data\n                });\n                console.log(res);\n\n            });\n    }\n\n    render() {\n\n        return (<div>\n            <Container style={{ marginTop: \"10px\" }}>\n                <br></br>\n                <Row style={{ textAlign: \"left\" }}>\n                    <Col xs lg=\"2\">\n                        &nbsp;\n                    </Col>\n                    <Col xs=\"8\">\n                        <h2>Status of World</h2>\n                    </Col>\n                </Row>\n            </Container>\n            <Container>\n                <br></br>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"2\">\n                        &nbsp;\n                    </Col>\n                    <Col md=\"8\">\n                        {this.state.summary &&\n                            <Container>\n                                <Row className=\"justify-content-md-center\">\n                                    <Col xs lg=\"4\" sm=\"12\">\n                                        <Card className=\"text-center\" bg=\"warning\" text=\"white\">\n                                            <Card.Header>Confirmed</Card.Header>\n                                            <Card.Body>\n                                                <Card.Title>\n                                                    <NumberFormat\n                                                        value={this.state.summary.confirmed.value || 0}\n                                                        displayType={'text'} thousandSeparator={true} />\n                                                </Card.Title>\n                                                <Card.Text>\n                                                    Cases\n                                            </Card.Text>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                    <Col xs lg=\"4\" sm=\"12\">\n                                        <Card className=\"text-center\" bg=\"success\" text=\"white\">\n                                            <Card.Header>Recovered</Card.Header>\n                                            <Card.Body>\n                                                <Card.Title>\n                                                    <NumberFormat\n                                                        value={this.state.summary.recovered.value || 0}\n                                                        displayType={'text'} thousandSeparator={true} />\n                                                </Card.Title>\n                                                <Card.Text>\n                                                    Cases\n                                            </Card.Text>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                    <Col xs lg=\"4\" sm=\"12\">\n                                        <Card className=\"text-center\" bg=\"danger\" text=\"white\">\n                                            <Card.Header>Deaths</Card.Header>\n                                            <Card.Body>\n                                                <Card.Title>\n                                                    <NumberFormat\n                                                        value={this.state.summary.deaths.value || 0}\n                                                        displayType={'text'} thousandSeparator={true} />\n                                                </Card.Title>\n                                                <Card.Text>\n                                                    Cases\n                                            </Card.Text>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </Container>\n                        }\n                    </Col>\n                    <Col xs lg=\"2\">\n                        &nbsp;\n                    </Col>\n                </Row>\n            </Container>\n            {this.state.dailyReport &&\n                <Container>\n                    <br></br>\n                    <Row>\n                        <Col lg={2}>&nbsp;</Col>\n                        <Col lg={8}>\n                            <Line\n                                data={{\n                                    labels: this.state.dailyReport.map(item => item.reportDate),\n                                    datasets: [{\n                                        data: this.state.dailyReport\n                                            .map(item => item.totalConfirmed),\n                                        label: 'Confirmed',\n                                        borderColor: 'rgb(251, 194, 55)',\n                                        backgroundColor: '#fbc23785',\n                                        fill: true,\n                                    }, {\n                                        data: this.state.dailyReport\n                                            .map(item => item.totalRecovered),\n                                        label: 'Recovered',\n                                        borderColor: '#47a442',\n                                        backgroundColor: '#47a442',\n                                        fill: true,\n                                    },\n                                    {\n                                        data: this.state.dailyReport\n                                            .map(item => item.deaths.total),\n                                        label: 'Deaths',\n                                        borderColor: 'red',\n                                        backgroundColor: 'red',\n                                        fill: true,\n                                    }\n                                    ]\n                                }}\n                            />\n                        </Col>\n                    </Row>\n                </Container>\n            }\n            {/* <Container>\n                <br></br>\n                <Row>\n                    <Col lg={3}>&nbsp;</Col>\n                    <Col lg={6}>\n                        <Table bordered striped hover responsive=\"sm\">\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th style={{ textAlign: \"left\" }}>Country Name</th>\n                                    <th>Confirmed</th>\n                                    <th>Recovered</th>\n                                    <th>Deaths</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.state.countryCases.map((item, index) => {\n                                    return <tr>\n                                        <td>{index + 1}</td>\n                                        <td style={{ textAlign: \"left\" }}>{item.Country}</td>\n                                        <td style={{ textAlign: \"right\" }}>\n                                            {item.TotalConfirmed}\n                                            <p style={{ margin: \"0px\" }}>\n                                                <small>\n                                                    {item.NewConfirmed} &uarr;\n                                                </small>\n                                            </p>\n                                        </td>\n                                        <td style={{ textAlign: \"right\" }}>\n                                            {item.TotalRecovered}\n                                            <p style={{ margin: \"0px\" }}>\n                                                <small>\n                                                    {item.NewRecovered} &uarr;\n                                                </small>\n                                            </p>\n                                        </td>\n                                        <td style={{ textAlign: \"right\" }}>\n                                            {item.TotalDeaths}\n                                            <p style={{ margin: \"0px\" }}>\n                                                <small>\n                                                    {item.NewDeaths} &uarr;\n                                                </small>\n                                            </p>\n                                        </td>\n                                    </tr>\n                                })}\n                            </tbody>\n                        </Table>\n                    </Col>\n                    <Col lg={3}>&nbsp;</Col>\n                </Row>\n            </Container> */}\n        </div>\n        );\n    }\n}","import React from 'react';\nimport Service from './service';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Table from 'react-bootstrap/Table';\nimport NumberFormat from 'react-number-format';\nimport { Line } from 'react-chartjs-2';\n\n\nexport class India extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            countryCases: [],\n            globalCases: {}\n        };\n    }\n\n\n    componentDidMount() {\n        Service.getSummaryOfIndia()\n            .then(res => {\n                console.log(res);\n                this.setState({\n                    summary: res.data\n                });\n            });\n\n        Service.getStateWiseSummary()\n            .then(res => {\n                this.setState({\n                    stateWiseSummary: res.data\n                });\n                console.log(res);\n            });\n    }\n\n    render() {\n\n        return (<div>\n            <Container style={{ marginTop: \"10px\" }}>\n                <br></br>\n                <Row style={{ textAlign: \"left\" }}>\n                    <Col xs lg=\"2\">\n                        &nbsp;\n                    </Col>\n                    <Col xs=\"8\">\n                        <h2>Status of India</h2>\n                    </Col>\n                </Row>\n            </Container>\n            <Container style={{ marginTop: \"10px\" }}>\n                <br></br>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"2\">\n                        &nbsp;\n                    </Col>\n                    <Col md=\"8\">\n                        {this.state.summary &&\n                            <Container>\n                                <Row className=\"justify-content-md-center\">\n                                    <Col xs lg=\"4\" sm=\"12\">\n                                        <Card className=\"text-center\" bg=\"warning\" text=\"white\">\n                                            <Card.Header>Confirmed</Card.Header>\n                                            <Card.Body>\n                                                <Card.Title>\n                                                    <NumberFormat\n                                                        value={this.state.summary.confirmed.value || 0}\n                                                        displayType={'text'} thousandSeparator={true} />\n                                                </Card.Title>\n                                                <Card.Text>\n                                                    Cases\n                                            </Card.Text>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                    <Col xs lg=\"4\" sm=\"12\">\n                                        <Card className=\"text-center\" bg=\"success\" text=\"white\">\n                                            <Card.Header>Recovered</Card.Header>\n                                            <Card.Body>\n                                                <Card.Title>\n                                                    <NumberFormat\n                                                        value={this.state.summary.recovered.value || 0}\n                                                        displayType={'text'} thousandSeparator={true} />\n                                                </Card.Title>\n                                                <Card.Text>\n                                                    Cases\n                                            </Card.Text>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                    <Col xs lg=\"4\" sm=\"12\">\n                                        <Card className=\"text-center\" bg=\"danger\" text=\"white\">\n                                            <Card.Header>Deaths</Card.Header>\n                                            <Card.Body>\n                                                <Card.Title>\n                                                    <NumberFormat\n                                                        value={this.state.summary.deaths.value || 0}\n                                                        displayType={'text'} thousandSeparator={true} />\n                                                </Card.Title>\n                                                <Card.Text>\n                                                    Cases\n                                            </Card.Text>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </Container>\n                        }\n                    </Col>\n                    <Col xs lg=\"2\">\n                        &nbsp;\n                    </Col>\n                </Row>\n            </Container>\n            {this.state.stateWiseSummary &&\n                <Container>\n                    <br></br>\n                    <Row>\n                        <Col lg={2}>&nbsp;</Col>\n                        <Col lg={8}>\n                            <Table bordered striped hover responsive=\"sm\">\n                                <thead>\n                                    <tr>\n                                        <th>#</th>\n                                        <th style={{ textAlign: \"left\" }}>States</th>\n                                        <th>Confirmed</th>\n                                        <th>Recovered</th>\n                                        <th>Deaths</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {this.state.stateWiseSummary.map((item, index) => {\n                                        if (!item.name) return null;\n                                        return <tr>\n                                            <td>{index + 1}</td>\n                                            <td style={{ textAlign: \"left\" }}>{item.name}</td>\n                                            <td style={{ textAlign: \"right\" }}>\n                                                <NumberFormat value={item.cases}\n                                                    displayType={'text'} thousandSeparator={true} />\n                                            </td>\n                                            <td style={{ textAlign: \"right\" }}>\n                                                <NumberFormat value={item.recovered}\n                                                    displayType={'text'} thousandSeparator={true} />\n                                            </td>\n                                            <td style={{ textAlign: \"right\" }}>\n                                                <NumberFormat value={item.deaths}\n                                                    displayType={'text'} thousandSeparator={true} />\n                                            </td>\n                                        </tr>\n                                    })}\n                                </tbody>\n                            </Table>\n                        </Col>\n                        <Col lg={2}>&nbsp;</Col>\n                    </Row>\n                </Container>\n            }\n        </div>\n        );\n    }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Nav from 'react-bootstrap/Nav';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport { Home } from './Home';\nimport { India } from './India';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <a class=\"navbar-brand\" href=\"#\">COVID19 Status</a>\n                <Nav activeKey=\"/active\">\n                    <Nav.Item>\n                        <Nav.Link href=\"/home\">Home</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link href=\"/india\">India</Nav.Link>\n                    </Nav.Item>\n                </Nav>\n            </nav>\n            <Router>\n                {/* <Redirect from=\"/\" exact to=\"/home\" /> */}\n                <Route exact path=\"/\" render={() => (\n                    <Redirect to=\"home\" />\n                )} />\n                <Route path=\"/home\" exact component={Home}></Route>\n                <Route path=\"/india\" exact component={India}></Route>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}